/**
 * !!! This file is autogenerated do not edit by hand !!!
 *
 * Generated by: @databases/pg-schema-print-types
 * Checksum: PFo9yiDq7BFkmMw/HusL+HyOFpY4J6QbHT6euTZLX0AwJ0dw28RNgbAJbKKjCmpsb3ar4PNa5uGAXR6fur4kkg==
 */

/* eslint-disable */
// tslint:disable

import Class, {Class_InsertParameters} from './class'
import Equip, {Equip_InsertParameters} from './equip'
import Feat, {Feat_InsertParameters} from './feat'
import List, {List_InsertParameters} from './list'
import Monster, {Monster_InsertParameters} from './monster'
import Other, {Other_InsertParameters} from './other'
import Race, {Race_InsertParameters} from './race'
import Rule, {Rule_InsertParameters} from './rule'
import Schema, {Schema_InsertParameters} from './schema'
import Spell, {Spell_InsertParameters} from './spell'

interface DatabaseSchema {
  class: {record: Class, insert: Class_InsertParameters};
  equip: {record: Equip, insert: Equip_InsertParameters};
  feat: {record: Feat, insert: Feat_InsertParameters};
  list: {record: List, insert: List_InsertParameters};
  monster: {record: Monster, insert: Monster_InsertParameters};
  other: {record: Other, insert: Other_InsertParameters};
  race: {record: Race, insert: Race_InsertParameters};
  rule: {record: Rule, insert: Rule_InsertParameters};
  schema: {record: Schema, insert: Schema_InsertParameters};
  spell: {record: Spell, insert: Spell_InsertParameters};
}
export default DatabaseSchema;

/**
 * JSON serialize values (v) if the table name (t) and column name (c)
 * is a JSON or JSONB column.
 * This is necessary if you want to store values that are not plain objects
 * in a JSON or JSONB column.
 */
function serializeValue(t: string, c: string, v: unknown): unknown {
  if (
    (t === "class" && c === "embed") ||
    (t === "equip" && c === "embed") ||
    (t === "feat" && c === "embed") ||
    (t === "list" && c === "embed") ||
    (t === "monster" && c === "embed") ||
    (t === "other" && c === "embed") ||
    (t === "race" && c === "embed") ||
    (t === "rule" && c === "embed") ||
    (t === "schema" && c === "schema") ||
    (t === "spell" && c === "embed")
  ) {
    return JSON.stringify(v);
  }
  return v;
}
export {serializeValue}

export type {
  Class,
  Class_InsertParameters,
  Equip,
  Equip_InsertParameters,
  Feat,
  Feat_InsertParameters,
  List,
  List_InsertParameters,
  Monster,
  Monster_InsertParameters,
  Other,
  Other_InsertParameters,
  Race,
  Race_InsertParameters,
  Rule,
  Rule_InsertParameters,
  Schema,
  Schema_InsertParameters,
  Spell,
  Spell_InsertParameters,
}
